<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Will&#39;s notebook</title>
  
  <subtitle>Share My Life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.daihuiyou.top/"/>
  <updated>2019-06-11T09:04:17.026Z</updated>
  <id>https://www.daihuiyou.top/</id>
  
  <author>
    <name>Will</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>软件工程之美</title>
    <link href="https://www.daihuiyou.top/2019/06/09/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E4%B9%8B%E7%BE%8E/"/>
    <id>https://www.daihuiyou.top/2019/06/09/软件工程之美/</id>
    <published>2019-06-09T14:56:51.000Z</published>
    <updated>2019-06-11T09:04:17.026Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="什么是软件？"><a href="#什么是软件？" class="headerlink" title="什么是软件？"></a>什么是软件？</h3><p>软件的目标用户是面向用户，然而程序是面向硬件的。</p><h3 id="看待问题的角度"><a href="#看待问题的角度" class="headerlink" title="看待问题的角度"></a>看待问题的角度</h3><p>很多时候， 自己在分析问题时往往陷入细节中， 并不能迅速想出解决方案。</p><p>类似写作，并不是确定好一个题目， 自己想到哪，写到哪， 往往结果是离题了。好的做法应该是：确定好题目，确定好架构（即你要写的大概的内容），架构好了，最后去写就是了。</p><p>当用工程方式去思考，会更多站在整体而非局部去思考， 更有大局观。</p><p>everthing is project。 </p><h3 id="会议的价值"><a href="#会议的价值" class="headerlink" title="会议的价值"></a>会议的价值</h3><p><strong><em>你是砍材的，他是放羊的，你和他聊一天，他的羊吃饱了，你的材呢？</em></strong></p><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><p>在编写自己的函数时，仅仅假设一个特定样本数据的输入， 并满足该函数的输出要求，就马不停蹄实现下一个函数的定义。 完全没有考虑这函数的健壮性，即没有足够的样本数据进行单元测试， 这样的函数犹如建房子的砖瓦「够用就行」。</p><p><img src="https://github.com/DaiHuiYou/Material/blob/master/pic/software.png?raw=true" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>leetcode</title>
    <link href="https://www.daihuiyou.top/2019/06/06/leetcode/"/>
    <id>https://www.daihuiyou.top/2019/06/06/leetcode/</id>
    <published>2019-06-06T14:25:18.000Z</published>
    <updated>2019-06-12T14:45:33.571Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><pre><code class="C++">vector&lt;int&gt;iterator::it = nums.begin();nums.insert(nums.end(), 100); // 等价于 nums.push_back(100);nums.insert(nums.end(), anothernums.begin, anothernums.end());   // nums = nums + anothernums</code></pre><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li>C++ sort() 时间复杂度</li></ul><p>Sort() 因为它使用的排序方法是类似于快排的方法，时间复杂度为n*log2(n)，执行效率较高！</p><p>果断放弃的自己造轮子， 来实现 时间复杂度为 O(n^2) 的冒泡或者选择算法。 ^_^</p><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul><li><strong>unordered_map</strong></li></ul><p>在 unordered_map 中，键值通常用于唯一标识元素，而映射值是与该键关联的内容的对象。键和映射值的类型可能不同。</p><p>在内部，unordered_map 中的元素<strong>没有按照它们的键值或映射值的任何顺序排序</strong>，而是根据它们的散列值组织成桶以允许通过它们的键值直接快速访问单个元素（具有常数平均时间复杂度）。</p><p>unordered_map 容器比映射容器更快地通过它们的键来访问各个元素，尽管它们通过其元素的子集进行范围迭代通常效率较低。</p><p>关键词：无序的 快速的检索 达到的是更快的访问 但是子集的范围迭代效率低。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>OS</title>
    <link href="https://www.daihuiyou.top/2019/05/28/OS/"/>
    <id>https://www.daihuiyou.top/2019/05/28/OS/</id>
    <published>2019-05-28T00:52:06.000Z</published>
    <updated>2019-06-09T14:31:10.285Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h3><p>并发： 同一「时间点」顺序执行，同一「时间段」交替重叠。 （本质性上也顺序执行，利用单个 CPU 实现宏观层面的并行）</p><p>并行：正真意义上并行，无论微观和宏观上都是并行。完全是多个 CPU 执行。</p><p>并发 <strong><em>VS</em></strong> 并行： 单个CPU <strong><em>VS</em></strong> 多个CPU</p><h3 id="线程是处理机调度的基本单位"><a href="#线程是处理机调度的基本单位" class="headerlink" title="线程是处理机调度的基本单位"></a>线程是处理机调度的基本单位</h3><p>结合我以前的经历，通常单片机的裸机程序的编程都是模块和模块之间的顺序执行，当一个模块因某种原因阻塞，从而导致接下来的模块不能执行而延迟响应，所以不能呈现出良好的实时性。</p><p>那么可以通过单片机的「硬件计时」，自己分配处理机的时间片，通过「中断」切换模块和模块之间的执行流程。进而实现模块和模块之间的并发执行。</p><p>裸机程序的模块间的并发类似与多线程，理解为模块间是手动分配处理机的执行时间， 而多线程是处理机调度的基本单位，是由操作系统依据特定算法分配线程的处理机执行时间。</p><p>只不过单片机未引入操作系统之前，需要自己要分配时间片和确定好中断流程，在操作系统中多线程这不需要这些操作，单纯调用语句就行了。</p><h3 id="进程是资源调度的基本单位"><a href="#进程是资源调度的基本单位" class="headerlink" title="进程是资源调度的基本单位"></a>进程是资源调度的基本单位</h3><p>单片机通常是执行一个特定的程序（进程）， 不存在进程间的资源争斗问题，一个进程拥有在单片机的全部资源。</p><p>我认为多进程的引入是为了充分利用资源。怎么说，属于临界资源的打印机，  一个进程需要打印机资源， 另一个进程也需要打印机资源，并不能让两个进程在同一「时间段」拥有打印机资源。</p><p>多进程的实现，在宏观层面上实现进程间的资源共享。当然， 同一时间段， 进程间的资源不能共享。这需要资源分配策略 「 银行家算法的实现 」。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="OS" scheme="https://www.daihuiyou.top/categories/OS/"/>
    
    
      <category term="OS" scheme="https://www.daihuiyou.top/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>程序设计</title>
    <link href="https://www.daihuiyou.top/2019/05/21/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>https://www.daihuiyou.top/2019/05/21/程序设计/</id>
    <published>2019-05-21T12:21:08.000Z</published>
    <updated>2019-06-11T09:07:58.746Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><code></code></p><h3 id="程序设计："><a href="#程序设计：" class="headerlink" title="程序设计："></a>程序设计：</h3><p>面向对象： 强调数据，名词为类，动词为该类的成员方法。</p><p>面向过程：整体到局部。</p><h3 id="C-类方法和-C-函数的区别"><a href="#C-类方法和-C-函数的区别" class="headerlink" title="C++ 类方法和 C 函数的区别"></a>C++ 类方法和 C 函数的区别</h3><ul><li><strong>在变量的角度</strong></li></ul><p>在 C 的函数中，只能使用 local variable（函数内部的所有变量），global variable （独立于该函数外的所有变量）。</p><p>在C++的 类方法中，可以使用 局部变量，可以使用属于对象的成员变量，可以使用属于类的静态成员变量，以及属于该文件的全局变量。 </p><ul><li><strong>在数据输出的角度</strong></li></ul><p>C 的函数在执行后，通过形参 pointer 来返回结果 或 通过 return 返回结果。结果只能是局部变量的值或者全局变量。</p><p>C++的类方法在执行后，可以通过 形参 或者 return  输出 成员变量，静态成员变量， 全局变量，局部变量的值或引用。</p><h3 id="对象调用成员方法和类调用成员方法："><a href="#对象调用成员方法和类调用成员方法：" class="headerlink" title="对象调用成员方法和类调用成员方法："></a>对象调用成员方法和类调用成员方法：</h3><p>obj.func(): 对象调用成员方法，可能会改变对象状态，也就是说将对象中的成员变量的值因成员方法的调用而所改变。</p><p>Class.func(): 类调用成员方法， 由于类无成员变量， 静态成员变量除外。所以 类调用成员方法只是单纯调用函数。</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><ul><li>内部类的拥有外围的所有元素的访问权限</li></ul><h3 id="头文件声明和类的声明"><a href="#头文件声明和类的声明" class="headerlink" title="头文件声明和类的声明"></a>头文件声明和类的声明</h3><p>C 的头文件的声明 和 C++ 的类的声明类似，</p><p>在 C 中，头文件声明变量和函数， 变量可在函数中使用。</p><p>在 c++ 中， 类的声明，成员变量和成员函数在 class 中声明， 通常一个文件包含一个类。</p><p>类的声明可以当做一个文件。</p><h3 id="变与不变的问题"><a href="#变与不变的问题" class="headerlink" title="变与不变的问题"></a>变与不变的问题</h3><p> 需求不可能是固定的，为了应对需求的改变，  避免以前代码推倒重写，这需要开闭原则（对外支持功能扩展，对已有的代码封闭）</p><p> 写新代码，就不要修改旧的代码。</p><p>类的成员变量：不变</p><p>类的成员函数的形参：变</p><ul><li>委托模式：接口不变，支持扩展功能。</li><li>适配器模式：功能相同，接口不同</li><li>策略模式：接口相同，功能不同</li><li>代理模式：引用技术，智能指针</li><li>装饰模式：不修改原有的代码，进行添加功能</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>SOCKET</title>
    <link href="https://www.daihuiyou.top/2019/05/20/SOCKET/"/>
    <id>https://www.daihuiyou.top/2019/05/20/SOCKET/</id>
    <published>2019-05-20T04:36:46.000Z</published>
    <updated>2019-05-30T14:36:58.535Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://github.com/DaiHuiYou/Material/blob/master/gif/socket.gif?raw=true" alt="gif过大，加载时间稍长"></p><h3 id="1-TCP连接的粘包问题"><a href="#1-TCP连接的粘包问题" class="headerlink" title="1. TCP连接的粘包问题"></a>1. TCP连接的粘包问题</h3><p>由于TCP是面向连接，二进制流传输，由于 Send()是发送给操作系统的缓冲区，并不是立即发送给客户端，等缓冲区有一定大小，再一次性发送给客户端。</p><p>所以由于这样的机制，多次消息的发送，可能一次性消息的接受。导致粘包问题，即是多个消息粘在一起发送。</p><ul><li><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5></li></ul><p>发送一次消息，等待接受消息，即判断对方是否接受到消息，确定对方接受到了消息，再继续发送下一条消息。</p><h3 id="2-多媒体文件传输"><a href="#2-多媒体文件传输" class="headerlink" title="2. 多媒体文件传输"></a>2. 多媒体文件传输</h3><p>多媒体文件并不是文本文件，采取文本文件读取，对方接受到多媒体文件无法解码。所以文件读取的方式采取是二进制。</p><ul><li><h5 id="传输文件的方法"><a href="#传输文件的方法" class="headerlink" title="传输文件的方法"></a>传输文件的方法</h5></li></ul><p>服务端：读取文件，连续 send()，直到发送完成。等待客户端接受完成消息。</p><p>客户端：接受服务端的消息，以二进制的方式存储到文件中，接受完成后，发送服务端接受完成消息。</p><h3 id="3-阻塞和非阻塞"><a href="#3-阻塞和非阻塞" class="headerlink" title="3. 阻塞和非阻塞"></a>3. 阻塞和非阻塞</h3><p>阻塞即是有消息则接受消息，没有消息则一直等待，不去执行其他操作。</p><p>在 TCP中 recv() 是采用阻塞方式接受。</p><p>非阻塞即有消息接受消息，没有消息则执行其他操作。</p><h3 id="4-多线程实现多个客户端连接"><a href="#4-多线程实现多个客户端连接" class="headerlink" title="4. 多线程实现多个客户端连接"></a>4. 多线程实现多个客户端连接</h3><p>多线程实现多个客户端连接，线程的数量等于客户端的数量， 当客户端连接数量大到一定程序，服务端容易崩溃。</p><h3 id="5-Select模型实现多个客户端连接"><a href="#5-Select模型实现多个客户端连接" class="headerlink" title="5. Select模型实现多个客户端连接"></a>5. Select模型实现多个客户端连接</h3><p>select 模型时 Winsock 中最常见的 I/0 模型， 它的中心思想是利用 select 函数，实现多个套接字 I/0 的管理。 利用 select 函数，可以判断套接字上是否存在数据，或则能否向一个套接字写入数据。 只有在条件满足时，才对套接字进行输出操作。</p><p>异步 I/0 模型通过调用 WSAAsynocSelect 函数实现，利用这个模型，应用程序可在一个套接字上接受以 windows 消息为基础的网络事件。</p><h3 id="6-ping"><a href="#6-ping" class="headerlink" title="6. ping"></a>6. ping</h3><p>PING ，使用 ICMP 协议， 基于网络层， 包加上 源IP 和 目的IP， 在 数据链路层中加上源 MAC 地址和目的 MAC 地址，发送到局域网的另一台主机。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="SOCKET" scheme="https://www.daihuiyou.top/categories/SOCKET/"/>
    
    
      <category term="项目" scheme="https://www.daihuiyou.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>排序</title>
    <link href="https://www.daihuiyou.top/2019/01/04/%E6%8E%92%E5%BA%8F/"/>
    <id>https://www.daihuiyou.top/2019/01/04/排序/</id>
    <published>2019-01-04T05:13:37.000Z</published>
    <updated>2019-05-28T02:33:43.170Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="O-n-2"><a href="#O-n-2" class="headerlink" title="O(n^2)"></a>O(n^2)</h2><h3 id="1-选择排序"><a href="#1-选择排序" class="headerlink" title="1 . 选择排序"></a>1 . 选择排序</h3><pre><code class="c++">// 未优化template&lt;typename T&gt;void selectionSort1(T arr[], int n){    for (int i = 0; i &lt; n; i++) {        for (int j = i + 1; j &lt; n; j++) {            if (arr[j] &lt; arr[i])                swap(arr[j], arr[i]);        }    }    return;}// 优化template &lt;typename T&gt;void selectionSort2(T arr[], int n){    for (int i = 0; i &lt;= n - 1; i++){        int minIndex = i;        for (int j = i+1; j &lt;= n - 1; j++) {            if (arr[minIndex] &gt; arr[j])                minIndex = j;        }        swap(arr[minIndex], arr[i]);    }    return;}</code></pre><ul><li>测试</li></ul><p>从 1 万个 0~100 的随机数中，从小到大排序。</p><p>selectionSort1 :  <font color="red"> 2.208 s </font></p><p>selectionSort2  : <font color="red">0.108 s</font></p><h3 id="2-插入排序"><a href="#2-插入排序" class="headerlink" title="2. 插入排序"></a>2. 插入排序</h3><pre><code class="c++">// 未优化template&lt;typename T&gt;void InsertionSort1(T arr[], int n){    for (int i = 1; i &lt; n; i++)    {        for (int j = i; j &gt; 0 &amp;&amp; arr[j] &lt; arr[j - 1]; j--) {            swap(arr[j], arr[j - 1]);        }    }    }// 优化template&lt;typename T&gt;void InsertionSort2(T arr[], int n) {    for (int i = 1; i &lt; n; i++) {        T e = arr[i];        int j;        for (j = i; j &gt; 0 &amp;&amp; arr[j - 1] &gt; e; j--)            arr[j] = arr[j - 1];        arr[j] = e;    }    return;}</code></pre><ul><li>测试</li></ul><p>从1万个 0~100 的随机数中，从小到大排序。</p><p>InsertionSort1 : <font color="red">2.653 s </font></p><p>InsertionSort2 : <font color="red">0.064 s</font></p><h3 id="3-希尔排序"><a href="#3-希尔排序" class="headerlink" title="3. 希尔排序"></a>3. 希尔排序</h3><pre><code class="c++">// 希尔排序template&lt;typename T&gt;// n 表示数组 capacityvoid shellSort(T arr[], int n){    int cnt = n - 1;  // 数组元素个数    int tmp = 0;       // 临时变量    // d：distance，     for (int d = n/2; d&gt;=1; d=d/2) {        // 遍历        for (int i = d; i &lt;=cnt; i++) {            // 插入排序            tmp = arr[i];            for ( int j = i - d; j&gt;=0 &amp;&amp; arr[j + d] &lt; arr[j]; j = j - d) {                arr[j + d] = arr[j];                arr[j] = tmp;            }        }    }}</code></pre><ul><li><p>测试</p><p>从 1 万个 0~100 的随机数中，从小到大排序。</p><p>Insertion Sort  :  <font color="red">6.332 s </font></p><p>Shell Sort       : <font color="red">0.029 s</font></p></li></ul><h2 id="O-nlogN"><a href="#O-nlogN" class="headerlink" title="O(nlogN)"></a>O(nlogN)</h2><h3 id="1-归并排序"><a href="#1-归并排序" class="headerlink" title="1. 归并排序"></a>1. 归并排序</h3><h3 id="2-快速排序"><a href="#2-快速排序" class="headerlink" title="2. 快速排序"></a>2. 快速排序</h3><pre><code class="c++">int __partition(int arr[], int l, int r){    int v = arr[l];    int j = l;    for (int i = l + 1; i &lt;= r; i++) {        if (arr[i] &lt; v) {            j++;            swap(arr[i], arr[j]);        }    }    swap(arr[j], arr[l]);    return j;}void __quickSort(int arr[], int l, int r){    if (l &gt;= r)        return;    int p = __partition(arr, l, r);    __quickSort(arr, l, p - 1);    __quickSort(arr, p + 1, r);}// 快速排序void quickSort(int arr[], int n){    __quickSort(arr, 0, n - 1);}</code></pre><h3 id="3-堆排序"><a href="#3-堆排序" class="headerlink" title="3. 堆排序"></a>3. 堆排序</h3><pre><code class="c++">void shiftDown(int arr[], int n, int k){    while (2 * k + 1 &lt; n) {        int j = 2 * k + 1;        if (j+1&lt;n &amp;&amp; arr[j] &lt; arr[j + 1]) {            j++;        }        if (arr[k] &lt; arr[j]) {            swap(arr[k], arr[j]);            k = j;        }        else            break;    }}void heapSort1(int arr[], int n){    // heapify    for (int i = (n - 1) / 2; i &gt;= 0; i--) {        shiftDown(arr, n, i);    }    for (int i = n - 1; i &gt; 0; i--) {        swap(arr[0], arr[i]);        shiftDown(arr, i, 0);    }}// n 为数组元素个数// k 当前要筛选的索引// arr[0] 为临时存储变量void shift(int arr[], int n, int k) {    while (2 * k &lt; n) {        int j = 2 * k;        if (j + 1 &lt; n &amp;&amp; arr[j] &lt; arr[j + 1])            j++;        if (arr[k] &lt; arr[j]) {            // arr[j] 与 arr[k] 交换            arr[0] = arr[j];            arr[j] = arr[k];            arr[k] = arr[0];            k = j;        }        else             break;    }}// n 为数组元素个数// arr[0] 为临时存储变量void heapSort2(int arr[], int n){    for (int i = (n - 1) / 2; i &gt;= 1; i--) {        shift(arr, n, i);    }    for (int i = n - 1; i &gt;=2; i--) {        // arr[i] 与 arr[1] 交换        arr[0] = arr[i];        arr[i] = arr[1];        arr[1] = arr[0];        shift(arr, i, 1);    }}</code></pre><ul><li><p>测试</p><p>从100 万个 0~100 的随机数中，从小到大排序。</p><p>Heap Sort 1 : <font color="red">2.228 s </font></p><p>Heap Sort 2 : <font color="red">0.248 s</font></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>硅谷来信</title>
    <link href="https://www.daihuiyou.top/2018/11/30/%E7%A1%85%E8%B0%B7%E6%9D%A5%E4%BF%A1/"/>
    <id>https://www.daihuiyou.top/2018/11/30/硅谷来信/</id>
    <published>2018-11-30T15:21:45.000Z</published>
    <updated>2019-01-06T14:38:49.329Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="收获比较大的方面："><a href="#收获比较大的方面：" class="headerlink" title="收获比较大的方面："></a>收获比较大的方面：</h3><ul><li>学习什么都不重要，重要是学习是其中的方法和思维过程。再一次说明思维的重要性， 书本上的学到的是记忆，要加以理解，应用，才算是知识。要不然许多人学很多遍的知识都比不上别人学一遍来得快。</li><li>科学有新的定义：科学是注重方法和过程，不是结论。 科学的结论不一定是正确的结论，正确的结论不一定是科学的。许多专家给出的结论可能是正确，但是不说明这是科学的。盲信所谓专家的精神，倒霉的是自己。 </li><li>科学强调实验结果的重复性，西方科学和技术最显著的特点是可继承性和可叠加性。 </li><li>结论可以证实，但不可证伪。为什么呢？  就比如 “ 学Python再加上经济环境不好，找相关的工作很难。”， 这一结论只能证明该结论是对，不能证明该结论是错的，要是今年学Python的找工作相对困难呢，说明结论对了么？但是要是明年找工作又容易了，结论错了么？  总之， 因为未来的不确定，结论可以证实，不能证伪。</li><li>别人会的自己不学，只学习别人不会。 别人不会当然前提是别人是想学而学不会，人工智很多人都想学吗？都学会了吗？ 不太现实， 基础知识需要太多了，不仅仅只是说学Python， 就可以了。</li></ul><h3 id="语录："><a href="#语录：" class="headerlink" title="语录："></a>语录：</h3><ul><li>对于那些试图在金字塔上爬几个台阶的人来讲，最需要具有不是抱怨社会的不公平，而是需要付出足够的努力，同时把主力以放到最该关注的事情上去。 </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Share" scheme="https://www.daihuiyou.top/categories/Share/"/>
    
    
      <category term="书籍" scheme="https://www.daihuiyou.top/tags/%E4%B9%A6%E7%B1%8D/"/>
    
  </entry>
  
  <entry>
    <title>算法精解</title>
    <link href="https://www.daihuiyou.top/2018/11/22/%E7%AE%97%E6%B3%95%E7%B2%BE%E8%A7%A3/"/>
    <id>https://www.daihuiyou.top/2018/11/22/算法精解/</id>
    <published>2018-11-22T11:54:02.000Z</published>
    <updated>2019-05-28T02:32:49.951Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="编程规范"><a href="#编程规范" class="headerlink" title="编程规范"></a>编程规范</h3><p><img src="https://i.imgur.com/SO1tRes.png" alt=""></p><pre><code class="c">#ifndef LIST_H#define LIST_H/*  funciton process result */typedef enum Result_{    FALSE = -1,    TRUE  = 0}Result;/* Define a structure for linked lists */typedef struct ListElmt_{    void                *data;    struct ListElmt_    *next;}ListElmt;/* Define a structure for linked lists */typedef struct List_{    int            size;    ListElmt    *head;    ListElmt    *tail;    int    (*match)(const void *key1, const void *key2);    void(*destroy)(void *data);}List;/* Public Interface */void list_init(List *list, void(*destroy)(void *data));void list_destory(List *list);int list_ins_next(List *list, ListElmt *element, const void *data);int list_rem_next(List *list, ListElmt *element, void **data);void list_destory(List *list);/* role : inline function*/#define list_size(list) ((list)-&gt;size)#define list_head(list) ((list)-&gt;head)#define list_tail(list) ((list)-&gt;tail)#define list_is_head(list, element) ((element) == (list)-&gt;head ? 1: 0)#define list_is_tail(list, element) ((element)-&gt;next == NULL ? 1 : 0)#define list_data(list) ((list)-&gt;data)#define list_next(list) ((list)-&gt;next)#endif</code></pre><pre><code class="c++">/* list.c */#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &quot;list.h&quot;/* list_init */void list_init(List * list, void(*destroy)(void *data)){    /* Initialize the list. */    list-&gt;size = 0;    list-&gt;destroy =     destroy;    list-&gt;head = NULL;    list-&gt;tail = NULL;    return;}/* list_destory */void list_destory(List *list){    void        *data;    /* Remove each element */    while (list_size(list) &gt; 0) {        if (list_rem_next(list, NULL, (void**)&amp;data) == 0             &amp;&amp; list-&gt;destroy != NULL){            /* Call a user-defined function to free dynamically data */            list-&gt;destroy(data);         }    }    /* No operations are allowed now, but clear the structure as a precautions */    memset(list, 0, sizeof(List));     return;}</code></pre><pre><code class="c++">/* list_ins_next *//* The ListElmt *element has the next pointer information , the next pointer is not null */int list_ins_next(List * list, ListElmt * element, const void * data){    ListElmt        *new_element;    /* Allocate storage for the element */    if ((new_element = (ListElmt *)malloc(sizeof(ListElmt))) == NULL) {        return -1;    }    /* Insert the element into the list */    new_element-&gt;data = (void *)data;    if (element == NULL) {        /* Handle insertion at the head of the list */        if (list_size(list) == 0)            list-&gt;tail = new_element;        new_element-&gt;next = list-&gt;head;        list-&gt;head = new_element;    }    else {        /* Handle insertion somewhere other than at the head */        if (element-&gt;next == NULL)            list-&gt;tail = new_element;        new_element-&gt;next = element-&gt;next;        element-&gt;next = new_element;    }    /* Adjust the size of the list to account for the inserted element */    list-&gt;size++;    return 0;}/* list_rem_next */int list_rem_next(List *list, ListElmt *element, void **data){    ListElmt        *old_element;    /* Do not allow removal an empty list */    if (list-&gt;head == NULL)        return -1;    /* Remove the element from the list */    if (element == NULL) {        /* Handle removal from the head of the list */        *data = list-&gt;head-&gt;data; //Generic pointer        old_element = list-&gt;head;        list-&gt;head = list-&gt;head-&gt;next;        if (list_size(list) == 1)            list-&gt;tail = NULL;    }    else {        /* Handle removal from somewhere other than the head */        if (element-&gt;next == NULL)            return -1;        *data = element-&gt;next-&gt;data;        old_element = element-&gt;next;        element-&gt;next = element-&gt;next-&gt;next; //It is easy to remember.    }    /* Free the storage allocated by the abstract datatype */    free(old_element);    /* Adjust the sizeof the list to account for the removal element */    list-&gt;size--;    return 0;}</code></pre><h3 id="使用链表的例子：-页帧管理"><a href="#使用链表的例子：-页帧管理" class="headerlink" title="使用链表的例子： 页帧管理"></a>使用链表的例子： 页帧管理</h3><p>​    <img src="https://i.imgur.com/d1GUdHJ.png" alt=""></p><h3 id="泛型指针"><a href="#泛型指针" class="headerlink" title="泛型指针"></a>泛型指针</h3><ul><li>很多种情况下， void 指针都是非常用的。 例如： C 标准函数库中的 memcpy 函数， 它将一段函数从内存中的一个地方复制到另一个地方。由于 memcpy 可能用来复制任何类型的参数的数据， 因此将它的指针参数设定为 void 类型</li></ul><h3 id="泛型指针和句柄的差别"><a href="#泛型指针和句柄的差别" class="headerlink" title="泛型指针和句柄的差别"></a>泛型指针和句柄的差别</h3><h5 id="个人理解："><a href="#个人理解：" class="headerlink" title="个人理解："></a>个人理解：</h5><ul><li>设计者： 设计函数的人</li><li><p>调用者： 调用函数的人</p></li><li><p>void 指针函数参数： 设计者不知道也不需要知道调用者使用的具体数据类型， void 指针做输出参数， 设计者可以根据已知的数据类型对 void 指针做转换。</p></li><li>句柄（void 类型）：调用者不知道也不需要知道设计者在函数体所使用的数据类型。句柄会在函数体转换成相应的数据类型。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>数据结构</title>
    <link href="https://www.daihuiyou.top/2018/10/11/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://www.daihuiyou.top/2018/10/11/数据结构/</id>
    <published>2018-10-11T00:53:13.000Z</published>
    <updated>2019-05-28T02:32:41.848Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="for循环常用写法"><a href="#for循环常用写法" class="headerlink" title="for循环常用写法"></a>for循环常用写法</h3><p>date: 2018-09-27 11:03:38</p><pre><code class="c++">void main(){    int  i = 0;    int a[20];    int len = 10;    int pos = 5;    i = i - 1; /*结果:i = -1; 不是溢出.*/    printf(&quot;i = %d\n&quot;, i);    /*数组赋值*/    for (i = 0; i &lt; len; i++)        a[i] = i + 1;    printf(&quot;\n&quot;);    /*逆序打印*/    for (i = len-1; i &gt;=0; i--)        printf(&quot;%d &quot;, a[i]);    printf(&quot;\n&quot;);    /*插入元素, 往后移动元素(倒序循环)*/    for (i = len-1; i &gt;=5; i--)/* 往后移动 倒序循环*/    {        a[i+1] = a[i];  /*表示最后要插入a[6] = a[5] */    }    a[5] = 0;    len = len + 1;        /*逆序打印*/    for (i = len-1; i &gt;= 0; i--)        printf(&quot;%d &quot;, a[i]);    printf(&quot;\n&quot;);    /*删除元素, 往前移动(正序循环)*/    for (i = 5; i &lt;len; i++) /*向前移动, 正序循环*/    {        a[i] = a[i+1];    }    len = len - 1;    /*逆序打印*/    for (i = len - 1; i &gt;= 0; i--) //倒序循环        printf(&quot;%d &quot;, a[i]);    printf(&quot;\n&quot;);    printf(&quot;\n&quot;);    printf(&quot;hello.&quot;);    system(&quot;pause&quot;);}/*总结:符号要注意区分, 正序循环&lt; 和 倒序循环&gt;A: 正序循环 for(i=0; i&lt;len; i++)              for(i=1; i&lt;=len; i++)B: 倒序循环 for(i=len-1; i&lt;=0; i--) //数组采用这种方式, 大于号和小于号           for(i=len; i&lt;0; i--) */</code></pre><h3 id="循序栈和链式栈"><a href="#循序栈和链式栈" class="headerlink" title="循序栈和链式栈"></a>循序栈和链式栈</h3><p>date: 2018-09-25 15:54:15</p><p>stack的采用模型：</p><p>线性表的链式存储：头插法　　　</p><p>线性表的顺序存储：尾插法　</p><h3 id="线性表顺序存储和链式存储"><a href="#线性表顺序存储和链式存储" class="headerlink" title="线性表顺序存储和链式存储"></a>线性表顺序存储和链式存储</h3><p>date: 2018-09-23 19:46:15</p><p>单独把结点的指针域 声明成结构体数据类型， </p><p>指针指向谁， 就把谁的地址赋给指针。</p><p><strong>note:</strong></p><p>wrong:</p><pre><code class="c++">current-&gt;next = node-&gt;next;node = current-&gt;next;        // what is wrong?   node is not pointer filed and can&#39;t be assigned.</code></pre><p>right:</p><pre><code class="c++">    node-&gt;next = current-&gt;next;    current-&gt;next = node;</code></pre><p><strong>LinkList Test FrameWork</strong></p><pre><code class="c++">#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdio.h&gt;#include &quot;linklist.h&quot;typedef struct Teahcer{    LinkListNode *node;    int age;    int name[64];}Teacher;void main(){    int len = 0;    int i = 0;    Teacher *tmp = NULL;    LinkList *list = NULL;      //note: list is handle that is void type.    list = LinkListCreate();    Teacher t1, t2, t3, t4, t5;    t1.age = 31;    t2.age = 32;    t3.age = 33;    t4.age = 34;    t5.age = 35;    list = LinkListCreate();    LinkListInsert(list, (LinkListNode*)&amp;t1, 0);    LinkListInsert(list, (LinkListNode*)&amp;t2, 0);    LinkListInsert(list, (LinkListNode*)&amp;t3, 0);    LinkListInsert(list, (LinkListNode*)&amp;t4, 0);    LinkListInsert(list, (LinkListNode*)&amp;t5, 0);    len = LinkListGetLength(list);    for (i = 0; i &lt; len; i++)    {        tmp = (Teacher*)LinkListGetElement(list, i);        if (tmp != NULL)        {            printf(&quot;age: %d &quot;, tmp-&gt;age);        }    }    printf(&quot;\n&quot;);    //note: This function deletes LinkList element at the position.    LinkListDeleteElement(list, 2);    printf(&quot;After delete element. \n &quot;);    len = LinkListGetLength(list);    for (i = 0; i &lt; len; i++)    {        tmp = (Teacher*)LinkListGetElement(list, i);        if (tmp != NULL)        {            printf(&quot;age: %d &quot;, tmp-&gt;age);        }    }    printf(&quot;\n&quot;);    LinkListClear(list);    printf(&quot;hello.&quot;);    system(&quot;pause&quot;);}</code></pre><p><strong>linklist.h</strong></p><pre><code class="c++">#pragma once#ifndef _LINKLIST_H#define _LINKLIST_H#include &lt;stdlib.h&gt;#include &lt;string.h&gt;#include &lt;stdio.h&gt;#endif/*    LinkList API*/typedef void LinkList;typedef struct _tag_LinkListNode{    struct _tag_LinkListNode *next;}LinkListNode; //Node type   It&#39;s a great heavest for me..  LinkList *LinkListCreate();int LinkListClear(LinkList *list);LinkListNode * LinkListGetElement(LinkList *list, int pos);int LinkListInsert(LinkList *list, LinkListNode *node, int pos);int LinkListDeleteElement(LinkList *list, int pos);int LinkListGetLength(LinkList *list);</code></pre><p><strong>linklist.c</strong></p><pre><code class="c++">#include &quot;linklist.h&quot;typedef struct _tag_LinkList{    LinkListNode header;    int length;}TLinkList; //It&#39;s still LinkListNode type.LinkList *LinkListCreate(){    TLinkList *ret = (TLinkList *)malloc(sizeof(TLinkList)); //alocate memory.     if (ret == NULL)    {        return NULL;    }    ret-&gt;length = 0;    ret-&gt;header.next = NULL;    return ret;}int LinkListClear(LinkList *list){    if (list == NULL)    {        return 0;    }    TLinkList *tlist = (TLinkList *)list;    free(tlist);    return 0;}LinkListNode * LinkListGetElement(LinkList *list, int pos){    int i = 0;    TLinkList *tlist = NULL;    LinkListNode *current = NULL;    LinkListNode *ret = NULL;    tlist = (TLinkList*)list; //handle(void type) have turn to Tlinklist(struct type);    current = &amp;tlist-&gt;header;     if (list == NULL || pos &lt; 0 || pos &gt;= tlist-&gt;length)    {        return NULL;    }    for (i = 0; i &lt; pos &amp;&amp; (current-&gt;next != NULL); i++)    {            current = current-&gt;next;    }    ret = current-&gt;next;    return     ret;}int LinkListInsert(LinkList *list, LinkListNode *node, int pos){    int i = 0;    TLinkList  *tlist = (TLinkList*)list; //transfrom    LinkListNode *current = NULL;    LinkListNode *ret = NULL;    current = &amp;tlist-&gt;header;    for (i = 0; i&lt;pos &amp;&amp; (current-&gt;next != NULL); i++)    {        current = current-&gt;next;    }    //insert elememt;    ret = current-&gt;next; //sort information, avoid that It can&#39;t find the next element;    current-&gt;next = node;    node-&gt;next = ret;    tlist-&gt;length++;    return 0;}int LinkListDeleteElement(LinkList *list, int pos){    int i = 0;    LinkListNode  *current = NULL;    LinkListNode *ret = NULL;    TLinkList *tlist = (TLinkList *)list;    current = &amp;tlist-&gt;header;    if (list == NULL || pos &lt;0 || pos &gt;= tlist-&gt;length)    {        return NULL;    }    for (i = 0; i &lt; pos; i++)    {        current = current-&gt;next;    }    ret = current-&gt;next;    current-&gt;next = ret-&gt;next;    return 0;}int LinkListGetLength(LinkList *list){    int ret = 0;    TLinkList *tlist = (TLinkList* )list;    ret = tlist-&gt;length;    return ret;}</code></pre><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>date: 2018-09-22 14:22:10</p><p>数据元素： 是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被成为记录。</p><p>数据项：一个数据元素可以由若干个数据项组成。</p><p>数据对象： 是性质相同的数据元素的集合，是数据的子集。</p><p>抽象数据类型（Abstract Data Type， ADT）： 是指一个数学模型及定义在该模型上的一组操作。  </p><p>逻辑结构：集合结构，线性结构，树形结构，图形结构</p><p>物理结构：顺序存储结构，链接存储结构。</p><p>好的算法还应该具备时间效率高和存储量低的特点。　　</p><p>线性阶：      </p><pre><code class="c++">int i;for(i=0; i&lt;n; i=+){}//对数阶： int count = 1;while (count  &lt; n){count = count * 2;}//平方阶：  int i, j;for (i = 0; i &lt; n; i++){    for (j = 0; j &lt; n; j++)    {    }}//时间复杂（m*n):  int i, j;for (i = 0; i &lt; n; i++){    for (j = i; j &lt; n; j++)    {        /*时间复杂度*/    }}//数列计算: n + (n-1) + (n-2) + ....+ 1 = n*(n+1)/2;/*最坏情况运行时间是一种保证， 那就是运行时间将不会再坏。在应用中，这是一种最重要的需求，通常，除非特别指定，我们提到的运行时间都是最坏情况的运行时间。  平均时间是所有情况中最有意义的，因为他是期望的运行时间。一般没有特殊说明的情况下， 都是指最坏时间复杂度。/*</code></pre><p><strong>可以通过算法的时间复杂度的估算， 判断自己写的代码是否效率低下，是不是可以通过优化让计算机更加快速高效。</strong></p><p>线性表的抽象数据类型 :</p><ol><li>时间复杂度</li><li><p>空间复杂度  </p></li><li><p>时间换空间  </p></li><li><p>空间换时间</p></li></ol><p>　</p><h3 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h3><p>定义： 是 n(n&gt;=0)个结点的有限集合，由一个根结点以及两颗互不相交的，分别成为左子树和右子树的二叉树组成。</p><p>基本特征：每个结点最多只有两颗子树； 左子树和右子树次序不能颠倒（有序树）</p><p>二叉树性质： 对于任何一颗二叉树，若2度的节点数有 n 个，则叶子数必定为 n+1。</p><p>满二叉树：每层都“充满”了结点。</p><p>完全二叉树： 第 k-1 层 和满二叉树的一样； 最后一层，叶子节点尽力靠左。</p><p>性质： <strong>对完全二叉树，若从上至下，从左到右编号，则编号为 i 的结点，其左孩子编号必为 2i， 其右孩子编号必为 2i+1， 其双亲的编号必为 i/2.</strong> 可以通过数组下标，隐藏地找到其左孩子和右孩子。 </p><p>不是完全二叉树， 则一律转为完全二叉树。 将各层空缺处统统补上”虚结点“， 其内容为空。</p><h4 id="二叉树的表示法"><a href="#二叉树的表示法" class="headerlink" title="二叉树的表示法"></a><strong>二叉树的表示法</strong></h4><p>二叉树的二叉链表 表示法</p><p>二叉树的三叉链表 表示法： 添加了 Parent Position</p><p>二叉树的双亲链表 Parent）： 子结点中保存了 双亲的位置。</p><p>​    </p><pre><code class="c">//二叉链 表示法 typedef struct BitNode {    int data;    struct BitNode *lchild, *rchild;}BitNode, *BitNode;//三叉链表typedef struct TriNode {    int data;    struct TriNode *lchild, *rchild;    struct TriNode *parent;}TriNode, *TriNode;//双亲表示法#define MAX_TREE_SIZE 100typedef struct BPTNode {    int data;    int parentPosition;    char LRTag;}BPTNode;typedef struct BPTree {    BPTNode nodes[MAX_TREE_SIZE];    int num_node;    int root;}BPTree;</code></pre><h4 id="二叉树遍历"><a href="#二叉树遍历" class="headerlink" title="二叉树遍历"></a>二叉树遍历</h4><p>先序遍历： DLR， 先根再左再右</p><p>中序遍历： LDR， 先左再根再右</p><p>后序遍历： LDR，先左再右再根</p><p>总结： 顺序都是相对于根（root）来说的。</p><p>二叉树表示算数表达式： </p><ol><li>先序遍历： 前缀表示法</li><li>中序遍历： 中缀表示法</li><li>后序遍历： 后缀表示法</li></ol><p>对遍历的分析：</p><p>1.从前面的三种遍历算法可以知道：如果将 printf 语句抹去，从递归的角度看， 这三种算法是完全相同的，或者说者三种遍历算法的访问路径是相同，知识访问结点的时机不同。</p><p>从虚线的出发点到终点的路径上，每个结点经过3次。</p><p>第 1 次经过时访问 = 先序遍历</p><p>第 2 次经过时访问 = 中序遍历</p><p>第 3 次经过时访问 = 后序遍历</p><h3 id="树的非递归中序遍历"><a href="#树的非递归中序遍历" class="headerlink" title="树的非递归中序遍历"></a>树的非递归中序遍历</h3><pre><code class="c++">/*步骤1： 如果结点有左子树，该结点入栈；若果结点没有左子树，访问该结点步骤2： 如果结点有右子树，重复步骤1；如果结点没有右子树（结点访问完毕），根据栈顶指示回退，访问栈顶元素，并访问右子树，重复步骤1如果栈为空，表示遍历结束。*/#include &lt;iostream&gt;using namespace std;#include &quot;stack&quot;typedef struct BitNode {    int data;    struct BitNode *lchild;    struct BitNode *rchild;}BitNode;//参数列表: BitNode *T, stack(BitNode *&gt; &amp;s//返回值: BitNode *BitNode *goLeft(BitNode *T, stack&lt;BitNode *&gt; &amp;s) {   //&amp;s 引用类型    if (T == NULL) {        return NULL;    }    while (T-&gt;lchild != NULL) {        //如果有左子树， 该结点入栈，并指向左子树。        s.push(T);        T = T-&gt;lchild;    }    //如果没有左子树， 返回该结点。    return T;}void inOrder(BitNode *T) {    BitNode *t = NULL;    stack&lt;BitNode *&gt;s;    t = goLeft(T, s);    while (t) {        printf(&quot;%d &quot;, t-&gt;data); // 访问该结点        //如果t有右子树，重复步骤1        if (t-&gt;rchild != NULL) {            t = goLeft(t-&gt;rchild, s);        }        // 如果t没有右子树，根据栈顶提示，回退        else if (!s.empty()) {            t = s.top();            s.pop();        }        // 如果没有右子树， 并且栈为空        else {            t = NULL;        }    }}void main() {    BitNode t1, t2, t3, t4, t5;    memset(&amp;t1, 0, sizeof(BitNode));    memset(&amp;t2, 0, sizeof(BitNode));    memset(&amp;t3, 0, sizeof(BitNode));    memset(&amp;t4, 0, sizeof(BitNode));    memset(&amp;t5, 0, sizeof(BitNode));    t1.data = 1;    t2.data = 2;    t3.data = 3;    t4.data = 4;    t5.data = 5;    t1.lchild = &amp;t2;    t1.rchild = &amp;t3;    t2.lchild = &amp;t4;    t3.lchild = &amp;t5;    printf(&quot;\r\n 非递归遍历 \r\n&quot;);    inOrder(&amp;t1);    cout &lt;&lt; &quot;hello world&quot; &lt;&lt; endl;    system(&quot;pause&quot;);}</code></pre><p>通过中序遍历和先序遍历可以确定一个树</p><p>通过中序遍历和后序遍历可以确定一个树</p><p>通过先序遍历和后序遍历不能确定一个树</p><p>单独先序遍历。</p><p>二叉线索树： 普通二叉树只能找到结点的左右孩子信息，而该结点的直接前驱和直接后继只能在遍历过程中获得；若可将遍历后对应的有关前驱和后继预存储起来，则从第一个结点开始就能很快“顺藤摸瓜”，而遍历整个树了。</p><h3 id="图"><a href="#图" class="headerlink" title="图"></a>图</h3><p>线性表中我们把数据元素叫元素，树中的数据元素叫结点，在图中数据元素，我们称之为顶点（Vertex）。</p><p>线性表中可以没有数据元素，称为空表。树中可以没有结点，叫做空树。同样，在图的结构中，不允许没有顶点，在定义中，若 V 是顶点的集合，则强调了顶点集合 V 有穷非空。</p><p>图中，任意两个顶点你之间都可能有关系，顶点之间的逻辑关系用吧边表示，边集可以是空的。</p><ul><li>连通图</li></ul><p>在无向图 G 中， 如果对于图中任意两个顶点v1，v2都是连通的，则称 G 是连通图。</p><p>无向图中的极大连通子图称为连通分量。</p><p>有向图 G 中，如果对于每一对vi， vj， 从vi 到 vj 和 从 vj 到 vi都存在路径，则称 G 是强连通图。 </p><ul><li>邻接表</li></ul><p>一种孩子表示法，将结点存入数组，并对结点的孩子进行链式存储，不管有多少孩子，也不会存在空间的浪费。这个思路同样适用于图的存储，我们把这种数据与链表结合的存储方法称为邻接表。</p><p>顶点表的各个结点有 data 和 firstedge 两个域表示， data 是数据域，存储顶点信息，firstedge 是指针域，指向边表的第一个结点。</p><p>边表结点有 adjvex 和 next 两个域组成， adjvex 是邻接点域，存储某顶点的邻接点在顶点中的下标。 next 则存储指向表中下一个结点的指针。</p><p>有时为了便于确定顶点的入度或以顶点为弧头的弧， 有向图的逆连接表，即对每个顶点 v1 都建立一个链接为 v1 为 弧头的表。</p><ul><li>邻接矩阵</li></ul><p>图的邻接矩阵存方式是用两个数组来表示图。一个一维数组存图中顶点信息， 一个二维数组（称为邻接矩阵）存储图中的边或弧的信息。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>C</title>
    <link href="https://www.daihuiyou.top/2018/10/10/C/"/>
    <id>https://www.daihuiyou.top/2018/10/10/C/</id>
    <published>2018-10-10T13:58:34.000Z</published>
    <updated>2019-05-28T02:32:12.956Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>date: 2018-09-10 13:57:09</p><p>链表是一种结构体， 包括数据域和指针域。</p><p>链表是一种物理存储单元上非连续的线性存储结构。</p><p>链表遍历</p><h3 id="动态库"><a href="#动态库" class="headerlink" title="动态库"></a>动态库</h3><p>date: 2018-09-06 17:20:42</p><ul><li>h头文件是编译时必须的，</li><li>lib库是链接时需要的，</li><li>dll动态链接库是运行时需要的。</li></ul><p><strong>.h .lib .dll三者的关系是：</strong></p><ul><li>h文件作用是：声明函数接口</li><li>lib文件作用是：二进制函数实现代码或函数在dll文件中的索引地址</li><li>dll文件作用是：函数可执行文件</li></ul><p>动态库是底层函数的调用入口。<br>动态库与测试框架相结合。</p><p><strong>void SockInit(void *handle)：</strong></p><ul><li>handle(句柄) 理解是调用者不需了解据类型，只要求主调函数分配内存，传参数于被调用函数；</li><li>被调函数将传进来的参数handle 强制转换相应的数据类型。</li></ul><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>date: 2018-09-06 11:44:51</p><p><strong>文件句柄</strong>： 就是内存块的首地址或者资源首地址。</p><p><strong>测试框架 和  分层模块的区别</strong></p><h3 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h3><p>date: 2018-09-05 13:53:11</p><pre><code class="c">//结构体定义typedef struct Teacher{    char name[30];    int age;}Teacher;Teacher *SortTeacher(int num) //堆区分配内存{    Teacher *pArray = NULL;    pArray = (Teacher *) malloc(sizeof(Teacher) *num);    if(pArray == NULL)    {        printf(&quot;pArray = NULL.&quot;);    }    return pArray.} //返回值//优化int CreateTeahcer_good( Teacher **pArray, int num)    //    用二级指针修改一级指针的值{    Teacher * temp;    temp = (Teacher *)malloc(sizeof(Teacher)*num);    if(temp == NULL)    {        return -1;        printf(&quot;堆区分配失败.&quot;);    }    *pArray = temp;    return 0;}</code></pre><p><strong>用结构体套一级指针</strong></p><pre><code class="c">//结构体定义typedef struct Teacher{    char name[30];    int age;    char *id;  //需要分配内存空间才有效。}Teacher;int CreateTeahcer_good( Teacher **pArray, int num)    //    用二级指针修改一级指针的值{    Teacher * temp;    int i = 0;    temp = (Teacher *)malloc(sizeof(Teacher)*num);    if(temp == NULL)    {        return -1;        printf(&quot;堆区分配失败.&quot;);    }    for(i=0; i&lt;num; i++)    {        temp[i].id = (char *)malloc(sizeof(char)*120);    }    *pArray = temp;    return 0;}//需要两次释放堆内存  void freeMem(Teacher *pArray){    if(pArray == NULL)    {        printf(&quot;error.&quot;);    }    if(pArray-&gt;id != NULL)    {        free(pArray-&gt;id);        pArray-&gt;id = NULL;    }    free(pArray);    pArray = NULL;}/* 结构体嵌套二级指针C语言的高效（数组作函数的参数的退化现象）指针作间接赋值的应用。（修改主函数一级指针的值，被调函数的参数为二级指针）。什么时候用一级指针，什么时候用二级指针。  被调用函数分配内存，供主调函数使用，二级指针。  主调函数分配内存，供被调函数使用，一级指针。 *p间接赋值成立的条件：3个条件：- 2个变量（通常一个实参，一个形参）- 建立关系，实参取地址赋给形参- *p形参区间接修改形参的值不断修改指针变量的值越界场景：char from[5] = &quot;abcde&quot; //数组越界 &quot;abcde&quot;包含&#39;\0&#39;总结:     函数调用时，用n级指针（形参）改变n-1级指针（实参）的值/*</code></pre><h3 id="const-的用法"><a href="#const-的用法" class="headerlink" title="const 的用法"></a>const 的用法</h3><p>date: 2018-09-04 09:17:33</p><pre><code class="c">//const char *p 指针所指向的内存不能被修改void getMem(const char *p){    p++;    //*p = 1;}//char *const p 指针变量的值的不能被修改。void getMem2(char *const p){    //p++;    *p = 1;}//const char *const p 指针变量的值和它所指向的内存不能被修改。void getMem3(const char *const p){    //p++;    //*p = 1;}</code></pre><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>date: 2018-09-04 16:57:20</p><pre><code class="c">void main(){    int a[] = {1, 2};    int b[100] = {1, 3};    int c[200] = {0}; //编译的是 就已经确定 所有的值 为零    memset(c, 0, sizeof(c)); //显示的 重置内存块    //对一维数组  C规定：    //c是数组首元素的地址 c+1 步长 4个字节    //&amp;c 是整个数组的地址 //&amp;c+1 步长 200*4     printf(&quot;hello...\n&quot;);    system(&quot;pause&quot;);    return ;}//怎么样表达int a[10]这种数据类型那？int[]    //类型本质：固定大小内存块的别名  //定义数组类型   </code></pre><pre><code class="c">void main(){    typedef int (MyArrayType)[5]; //定义了一个数据类型  数组数据类型    int i = 0;    MyArrayType  myArray;  //int myArray[5];    for (i=0; i&lt;5; i++)    {        myArray[i] = i+1;    }    for (i=0; i&lt;5; i++)    {        printf(&quot;%d &quot;, myArray[i]);    }printf(&quot;myArray代表数组首元素的地址 myArray:%d myArray+1:%d \n&quot;, myArray, myArray+1);printf(&quot;&amp;myArray代表整个数组的地址 &amp;myArray:%d &amp;myArray+1:%d \n&quot;, &amp;myArray, &amp;myArray+1);    printf(&quot;hello...\n&quot;);    system(&quot;pause&quot;);    return ;}</code></pre><p><strong>定义数组指针变量的方法1</strong></p><pre><code class="c">void main(){    char *Myarray[] = {&quot;1111&quot;, &quot;33333&quot;, &quot;aaaa&quot;}; //指针 数组    //数组指针  用一个指针 来指向一个数组    typedef int (MyArrayType)[5]; //定义了一个数据类型  数组数据类型    int i = 0;    MyArrayType  myArray;  //int myArray[5]; //用类型定义变量     MyArrayType *pArray; //定义一个指针变量 这个指针变量 指向一个数组    {        int myArray2[5]; //相当于一级指针        pArray = &amp;myArray2; //相当于2级指针        for (i=0; i&lt;5; i++)        {            (*pArray)[i] = i+1;        }        for (i=0; i&lt;5; i++)        {            printf(&quot;%d &quot;, (*pArray)[i]);        }    }    printf(&quot;hello...\n&quot;);    system(&quot;pause&quot;);    return ;}</code></pre><p><strong>定义数组指针变量的方法2</strong></p><pre><code class="c">void main(){    //定义声明一个数组指针类型    typedef int (*PArrayType)[5];    PArrayType pArray;  //告诉编译器 给我分配一个指针变量    int c[5];    int i  = 0;    pArray = &amp;c;    for (i=0; i&lt;5; i++)    {        (*pArray)[i] = i + 1;    }    for (i=0; i&lt;5; i++)    {        printf(&quot;%d &quot;, (*pArray)[i]);    }    printf(&quot;hello...\n&quot;);    system(&quot;pause&quot;);    return ;}</code></pre><p>定义数组指针变量的方法3</p><pre><code class="c">void main(){    //int [][5]    int (*pMyArray)[5]; //直接定义一个指向数组的 数组指针变量    int c[5];    int i  = 0;    pMyArray = &amp;c;    for (i=0; i&lt;5; i++)    {        (*pMyArray)[i] = i + 1;    }    for (i=0; i&lt;5; i++)    {        printf(&quot;%d &quot;, (*pMyArray)[i]);    }    printf(&quot;hello...\n&quot;);    system(&quot;pause&quot;);    return ;}</code></pre><p><strong>多维数组名的本质是数组指针</strong></p><p><strong>多维数组作参数退化问问题</strong></p><pre><code class="c">//多维数组作参数的退化问题void getArray1(int buff[3][5])//buff退化为数组指针{    int num = 0;    int i, j;    int temp = 0;    num = sizeof(buff);    printf(&quot;num:%d\n&quot;, num);    for(i=0; i&lt;3; i++)    {        for(j=0; j&lt;5; j++)        {            *(*(buff+i)+j) = temp++;        }    }}void getArray2(int buff[][5]){    int i, j;    int temp = 0;    for(i=0; i&lt;3; i++)    {        for(j=0; j&lt;5; j++)        {            buff[i][j] = temp++;        }    }}void getArray3(int (*buff)[5]){    int i, j;    int temp = 0;    for(i=0; i&lt;3; i++)    {        for(j=0; j&lt;5; j++)        {            *(*(buff+i)+j) = temp++;;        }    }}/*    多维数组名的本质  数组指针 ，步长 一维的长度    (a+i) 代表是整个第i行的地址  二级指针    *(a+i) 代表 1级指针  第i行首元素的地址    *(a+i) + j  ===&gt; &amp;  a[i][j]    *( *(a+i) + j) ===&gt;a[i][j]元素的值*/void main(){        int a[3][5];    int i, j;    int temp = 0;    getArray3(a);    for(i=0; i&lt;3; i++)    {        for(j=0; j&lt;5; j++)        {            printf(&quot;%d &quot;, a[i][j]);        }    }        printf(&quot;hello.\n&quot;);    system(&quot;pause&quot;);    return;}/*    等价关系    | 数组参数 | 等效数组参数     | ------ | ------ |    | 一维数组 char a[30] | 一级指针 char *a     | 指针数组 char *a[30] | 二级指针char **a     | 二维数组 char a[5][30] | 数组指针变量char (*a)[30]*/</code></pre><h3 id="二级指针的三种内存模型"><a href="#二级指针的三种内存模型" class="headerlink" title="二级指针的三种内存模型"></a>二级指针的三种内存模型</h3><p>date: 2018-09-04 11:28:19</p><pre><code class="c">void main(){    int num = 3;    int i, j;    char *p[] = {&quot;asdv&quot;, &quot;abcd&quot;, &quot;123&quot;};     char myArray[10][10] = {&quot;asdv&quot;, &quot;abcd&quot;, &quot;123&quot;};    char **buff = (char**)malloc(sizeof(char*)*4);    for(i=0; i&lt;num; i++)    {        buff[i] = (char*)malloc(sizeof(char)*10);        sprintf(buff[i], &quot;%d%d%d&quot;,i+1,i+1,i+1);    }    for(i=0;i&lt;num; i++)    {        printf(&quot;%s\n&quot;, buff[i]);    }    system(&quot;pause&quot;);}</code></pre><p><img src="https://i.imgur.com/7xWidmb.png" alt=""></p><h3 id="字符串常用操作"><a href="#字符串常用操作" class="headerlink" title="字符串常用操作"></a>字符串常用操作</h3><p>date: 2018-09-03 15:02:59</p><p><strong>字符串COPY函数优化过程</strong></p><pre><code class="c">/*buf[3] 和 *(p+3)   1.[]的本质 ： 和 *p 是一样的， 只不过是符合程序员的阅读习惯   2.buf是一个指针， 只读的常量， 是一个常量的指针， 析构内存的时候，保证buf所指向的内存空间安全释放。   3.p普通指针 和 数组第一个元素地址的区别*/void str_copy(char *from, char *to)  //表明主调函数分配内存，供被调函数内部使用{    for( ; *from != &#39;\0&#39;; from++, to++)    {        *to = *from;    }    *to = &#39;\0&#39;;}void str_copy1(char *from, char *to){    while( (*to = *from) != &#39;\0&#39;)    {        to++;        from++;    }}void str_copy2(char *from, char *to){    while((*to++ = *from++) != &#39;\0&#39;)  //等效与*to = *from; to++; from++;    {        ;    }}//建议不要直接修改形参的值， 要引入临时指针变量，把形参接过来void str_copy_good(char *from, char *to){    char *tempfrom = from;    char *tempto = to;    if( tempfrom ==NULL || tempto == NULL)    {        return;    }    while((*tempto++ = *tempfrom++) != &#39;\0&#39;);    printf(&quot;to : %s\n&quot;,to); //这样可以直接打印，避免COPY后，指针指向\0，打印不出来。}</code></pre><p><strong>正确示范</strong></p><pre><code class="c">void main(){    char *p = &quot;abcd&quot;;     char buff[123]; //分配内存    str_copy2(p, buff);    printf(&quot;buff:%s\n&quot;,buff);    system(&quot;pause&quot;);}</code></pre><p><strong>错误示范</strong> </p><pre><code class="c">void main(){    char *p = &quot;abcd&quot;;     char *to = NULL;//没有分配内存    str_copy2(p, to);//直接在0X0地址写值，程序运行中断。    printf(&quot;buff:%s\n&quot;,to);    system(&quot;pause&quot;);}</code></pre><p><strong>项目开发中字符串模型</strong></p><pre><code class="c">/* (*count)++和 *count++的区别：*count++ 等效于 *(count++)1. 输入特性 in：主函数分配内存，供被调函数使用。2. 输出特性out：被调函数分配内存，供主调函数。*/int getCount(char *mystr /*in*/, char *sub/*in*/, char *ncount/*in*/){    char * p = mystr;    char * count = ncount;    int ret;    if( mystr == NULL || sub == NULL || ncount == NULL)    {        ret = -1;        printf(&quot; mystr == NULL || sub == NULL || ncount == NULL)&quot;);    }    do    {        p = strstr(p, sub);        if(p != NULL)        {            (*count)++;  //(*count)++和 *count++的区别：*count++ 等效于 *(count++)            p = p + strlen(sub);        }    }while(*p != &#39;\0&#39;);    ret = 0;    return ret;}void main(){    char *p = &quot;123123adcd123123abcd123&quot;;    char *substr = &quot;123&quot;;     char count = 0;    int  ret;    ret = getCount(p, substr, &amp;count);    if (ret != 0)    {        printf(&quot;getCount() error;&quot;);        return;    }    printf(&quot;count :%d\n&quot;, count);    system(&quot;pause&quot;);}</code></pre><p><strong>字符串反转</strong></p><p>​    </p><p>​    </p><pre><code class="c">int reverse(char *str){    int length;    char *temp = str;    char *p1;    char *p2;    char c;    if(temp == NULL)    {        return -1;        printf(&quot;str = NULL.&quot;);    }    length = strlen(temp);    p1 = temp;    p2 = temp + length -1;    while(p1 &lt; p2)    {        c = *p1;        *p1 = *p2;        *p2 = c;        ++p1;        --p2;    }    return 0;}void main(){    char buff[] = &quot;123123abcd123123abcd123&quot;;    //char q[] = &quot;123123abcd123123abcd123&quot;;全局区不能被调用函数reverse()修改值    char *substr = &quot;abcd&quot;;     char count = 0;    int  ret;    printf(&quot;buff[]: %s\n&quot;, buff);    ret = reverse(buff);    if(ret != 0)    {        printf(&quot;reverse() error.&quot;);        return;    }    printf(&quot;buff = %s\n&quot;, buff);    system(&quot;pause&quot;);}</code></pre><p>​    </p><p><strong>通过递归方式和局部变量的方式实现的逆序打印字符串。</strong></p><pre><code class="c">void  inverse(char *p, char *mybuf){    if( p == NULL)    {        return ;        printf(&quot; p = NULL.&quot;);    }    if(*p == &#39;\0&#39;)    {        return;    }    inverse(p+1, mybuf);    strncat(mybuf, p, 1); //}void main(){    char buf[] = &quot;abcdfg&quot;;    char mybuf[100]={0};    inverse(buf,mybuf);    printf(&quot;%s\n&quot;, mybuf);    system(&quot;pause&quot;);    }</code></pre><p>​    </p><h3 id="二级指针的间接赋值"><a href="#二级指针的间接赋值" class="headerlink" title="二级指针的间接赋值"></a>二级指针的间接赋值</h3><p>date: 2018-09-02 19:07:59</p><pre><code class="c">void getMem(int **p)  //通过二级指针形参， 指向主函数的一级指针{    *p = (int*)malloc(100);}void getMem2(int *p) //一级指针形参，不能修改主函数的一级指针的值{    p = (int*)malloc(sizeof(char)*100);}void main(void){    int **p2 = NULL;    int *p1 = NULL;    p2 = &amp;p1;    getMem(p2);    printf(&quot;int *p :%d\n&quot;, p1); //修改了p1的值    getMem2(p1); //无修改p1的值    printf(&quot;int *p: %d\n&quot;, p1);    system(&quot;pause&quot;);    return ;}//结果显示：//int *p :7746448//int *p: 7746448//请按任意键继续. . .</code></pre><p><strong>间接赋值的应用</strong></p><pre><code class="c">    void getMem(char** p1/*out*/, int *len1/*out*/, char** p2/*out*/, int *len2/*out*/)    {        char *temp1 = NULL;        char *temp2 = NULL;        temp1 = (char *)malloc(100);        strcpy(temp1, &quot;12312312&quot;);        *len1 = strlen(temp1);        *p1 = temp1;        temp2 = (char *)malloc(200);        strcpy(temp2, &quot;asdfasdfasdf&quot;);        *len2 = strlen(temp2);        *p2 = temp1;    }    void main(void)    {        char *p1 = NULL;        char *p2 = NULL;        int  len1, len2;        getMem(&amp;p1, &amp;len1, &amp;p2, &amp;len2);//可以修改main函数的变量        printf(&quot;p1 = %s\n&quot;, p1);        printf(&quot;len1 = %d\n&quot;, len1);        printf(&quot;p2 = %s\n&quot;, p2);        printf(&quot;len2 = %d\n&quot;, len2);        system(&quot;pause&quot;);        }</code></pre><p><strong>指针作函数参数, 具有输入输出特性</strong></p><ul><li>输入特性 in：主函数分配内存，供被调函数使用。</li><li>输出特性out：被调函数分配内存，供主调函数。</li></ul><h3 id="指针也是一种数据类型"><a href="#指针也是一种数据类型" class="headerlink" title="指针也是一种数据类型"></a>指针也是一种数据类型</h3><p>date: 2018-09-02 10:07:52</p><ul><li>指针是一种数据类型，是指它指向的内存空间的数据类型  </li><li>含义1：指针步长（p++），根据所致内存空间的数据类型来确定  </li><li>p++=(unsigned char )p + sizeof(a);  </li><li>结论：指针的步长，根据所指内存空间类型来定</li></ul><pre><code class="c">void main(){    int b[40];    printf(&quot;b=%d, b+1=%d, &amp;b=%d, &amp;b+1=%d\n&quot;, b, b+1, &amp;b, &amp;b+1);    system(&quot;pause&quot;);     return;} 结果显示:    b=3013888, b+1=3013892, &amp;b=3013888, &amp;b+1=3014048  //b = &amp;b, b+1 != &amp;b+1; //b 表明 数组第一个数的地址。  //&amp;b 表明 整个数组的首地址。  //b 和 &amp;b 所代表的数据类型不一样 //&amp;b+1 加整个数组的大小得到的地址。  //&amp;b 加数组中第一个数的大小得到的地址。</code></pre><h3 id="堆栈区和函数调用分析"><a href="#堆栈区和函数调用分析" class="headerlink" title="堆栈区和函数调用分析"></a>堆栈区和函数调用分析</h3><p>date: 2018-09-02 08:57:39</p><p><strong>栈的生长方向</strong><br><img src="https://i.imgur.com/HEIBUoh.png" alt=""></p><p><strong>函数调用分析</strong><br><img src="https://i.imgur.com/qPse2Og.png" alt=""></p><pre><code class="c">//栈的开口向上向下,,测试 release和dubug;//一般认为:栈开口向下 //不管栈开口向上还是向下,buf的内存地址buf+1,永远向上的..void main(void){    int a;     int b;    char buf[99];  //静态编译的时候 buf所代表的内存空间的标号 就已经定义下来了....    printf(&quot;&amp;a:%d\r\n&quot;, &amp;a);    printf(&quot;&amp;b:%d\r\n&quot;, &amp;b);    printf(&quot;buf:%d\r\n&quot;, buf);    printf(&quot;hello\n&quot;);    system(&quot;pause&quot;);    return ;}</code></pre><h3 id="堆栈区的理解"><a href="#堆栈区的理解" class="headerlink" title="堆栈区的理解"></a>堆栈区的理解</h3><p>date: 2018-09-01 20:40:25    </p><pre><code class="c">//堆区char *getMem(int num){    char *p;    p = (char *)malloc(sizeof(char)*num); //在栈区存放 堆分配内存    if(p == NULL)    {        return;    }    return p;}//栈区char * getMem2(){    char *p = NULL;    char a[40]; //局部变量，临时变量    p = a;    return p;}void main(void){    char *p1 = NULL;    char *p2 = NULL;    p1 = getMem(10);    if(p1 == NULL)    {        return;    }    p2 = getMem2();    if(p2 == NULL)    {        return;    }    strcpy(p1, &quot;123123&quot;); //&quot;123123&quot; 复制到 p1中    strcpy(p2, &quot;123123&quot;);    //打印p1 p2 所指向内存空间的数据    printf(&quot;p1:%s p2:%s\r\n&quot;, p1, p2);    //打印p1 p2 的值    printf(&quot;p1:%d , p2:%d \n&quot;, p1, p2);     printf(&quot;hello\n&quot;);    system(&quot;pause&quot;);    return ;}//结果显示：//p1:123123 p2:乱码//p1:2896568 , p2:1572272//hello...//请按任意键继续. . .mallc()分配出来的堆区，可以通过指针， 使两个函数共享一块内存块，正是C语言强大的地方 </code></pre><h3 id="数据类型的大小-内存四区的划分"><a href="#数据类型的大小-内存四区的划分" class="headerlink" title="数据类型的大小, 内存四区的划分"></a>数据类型的大小, 内存四区的划分</h3><p>date: 2018-09-01 15:57:49</p><h3 id="函数参数退化问题-退回一个指针"><a href="#函数参数退化问题-退回一个指针" class="headerlink" title="函数参数退化问题, 退回一个指针"></a>函数参数退化问题, 退回一个指针</h3><p>date: 2018-09-01 12:01:59</p><ul><li><p>结论： 把数组的内存首地址和数组的有效长度传给被调用函数  </p></li><li><p>实参的 a 的 形参的 a的数据类型不一样  </p></li><li><p>形参中的数组， 编译器会把它当成指针处理， 这是C语言的特色。   </p></li><li><p>形参写在函数上，和卸载函数内是一样的，只不过是具有对外的属性而已。  </p><pre><code class="c">void SortArray(int a[], int num) // int a[] 数组的形参自动退化成指针。{    int i = 0, j = 0;    int temp = 0;    int num1 = 0;    num1 = sizeof(a) / sizeof(a[0]);    printf(&quot;num1: %d\r\n&quot;, num1); // num1  = 1, 结果表明形参中的a[]是指针类型。    for(i=0; i&lt;num; i++)    {        for(j=0; j&lt;i+1; j++)        {            if(a[i] &lt; a[j])            {                temp = a[i];                a[i] = a[j];                a[j] = temp;            }        }    }}void printfArray(int a[], int num){    int i = 0;    for(i=0; i&lt;6; i++)    {        printf(&quot;%d &quot;, a[i]);    }    printf(&quot;\n&quot;);}//排序void main(void){int a[] = {123,321,231,332,221,1};int    i, j, temp;int num = 0;num = sizeof(a) / sizeof(a[0]);printf(&quot;num = %d \r\n&quot;, num); // num = 6, 结果表明a[]为数组类型。SortArray(a, num);printfArray(a, num);printf(&quot;\n&quot;);printf(&quot;hello...\n&quot;);system(&quot;pause&quot;);return;}</code></pre><p><code>`</code></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/categories/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="程序语言" scheme="https://www.daihuiyou.top/tags/%E7%A8%8B%E5%BA%8F%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://www.daihuiyou.top/2018/08/28/Git/"/>
    <id>https://www.daihuiyou.top/2018/08/28/Git/</id>
    <published>2018-08-28T07:35:41.000Z</published>
    <updated>2019-06-11T11:09:51.510Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="GitHub基本概念"><a href="#GitHub基本概念" class="headerlink" title="GitHub基本概念"></a>GitHub基本概念</h3><ul><li><strong><em>Repository</em></strong>： 开源项目</li><li><strong><em>Issue</em></strong>： 在开源项目中，别人发现你的项目有Bug，或者某些地方做的不够好，他就可以给你提个<strong><em>Issue</em></strong> ，然后这些问题逐个去修复，即一个一个<strong><em>Close</em></strong>掉。</li><li><strong><em>Star</em></strong>：关注</li><li><strong><em>Fork</em></strong>：引用别人的开源项目</li><li><strong><em>Pull Request</em></strong>：在<strong><em>Fork</em></strong>的基础上，有更好的改进，提交给本开源项目的人，他收到请求后，仔细阅读你的提交的代码，即 <strong><em>review</em></strong>, 就接受你的<strong><em>Pull Request</em></strong>。</li><li><strong><em>Watch</em></strong>： <strong><em>Watch</em></strong>了该项目，它的任何更新消息，会通知你。</li><li><strong><em>Gist</em></strong>： 单纯分享代码段。</li></ul><h3 id="ssh协议"><a href="#ssh协议" class="headerlink" title="ssh协议"></a>ssh协议</h3><p>ssh-keygen -t rsa ： 就是指定 rsa 算法生成密钥，接着连续三个回车键，生成两个文件id_rsa和id_ras.pub, id_rsa.pub就是公钥，对应的id_rsa是私钥。  </p><p>将id_rsa.pub添加到GitHub上。这样就可以把Git和GitHub同步上了。</p><h3 id="Git-命令"><a href="#Git-命令" class="headerlink" title="Git 命令"></a>Git 命令</h3><p>git push origin master : 把本地代码推到远程master分支。  </p><p>git pull origin master : 远程master的最新代码拉下来。</p><p>git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:daihuiyou/Material.git: 本地有仓库，修改很多次，需要更改为远程仓库地址。  </p><p>在提交代码之前，先要设置自己的用户名与邮箱，这些信息会出现所有的commit记录里  </p><pre><code>git config -global user.name &quot;daihuiyou&quot;  git config -global user.eamil &quot;daihuiyou.dev@gmail.com&quot;</code></pre><p> <strong><em>Pull requests</em></strong>： 我们每个人都可以一起参与开发，一起来完善，而这都通过<strong><em>Pull requestss</em></strong>来完成。  </p><ul><li><strong><em>fork</em></strong> 他人项目</li><li><strong><em>git clone</em></strong> （fork 来项目）</li><li>在本地，自己修改这个项目</li><li><strong><em>git push</em></strong> 到自己远程仓库</li><li><strong><em>Pull requests</em></strong> 到 他人项目上</li><li>他人 <strong><em>reviews</em></strong> 你在他项目修改什么， 并觉得合理， 就接受你的PR。</li><li>完成这个项目的贡献。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="工具" scheme="https://www.daihuiyou.top/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="工具" scheme="https://www.daihuiyou.top/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>学会提问</title>
    <link href="https://www.daihuiyou.top/2018/08/21/%E5%AD%A6%E4%BC%9A%E6%8F%90%E9%97%AE/"/>
    <id>https://www.daihuiyou.top/2018/08/21/学会提问/</id>
    <published>2018-08-21T04:19:37.000Z</published>
    <updated>2019-05-28T02:33:14.708Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>日常上，我在网络上几乎不评论某些看法和表达自己的看法。因为心理上，我想成为信息的接受者，这样舒服，不必费劲，不必评论，不必打字。哈哈哈，发现自己懒癌已经不轻了。</p><p>但是我自己看了在微信，知乎看了许许多多的文章，我发现只有自己觉得认同的，通常不会再多考虑作者的理由是否妥当，就贸然接受其结论。 我认为这样不好，没有属于自己的思想。 </p><p>看完《学会提问》，批判性思维是重要的，克服自己的懒癌，不想是信息的接受者，而是信息的筛选者，还要是敢于表达自己的观点和想法。</p><h3 id="读书摘抄"><a href="#读书摘抄" class="headerlink" title="读书摘抄"></a>读书摘抄</h3><p><strong>价值观</strong>：  </p><ol><li>苏格拉底说过的话:”我唯一所知的就是我一无所知。”  </li><li>找不到作者的结论，你就会曲解别人的意图，这样做出的回应也显得驴唇不对马嘴。</li></ol><p>关键问题：论题和结论。</p><p>没有把证据支撑的断言称为纯观点。</p><p>写作建议：在写作之前最好确定好论题，引导读者得出你的结论</p><p>如果你没找到这些潜在的联系，你常常会发现自己不知不觉就相信了一些观点，这些观点稍加考虑的话就绝不会接受。  </p><p>一个论证的表面结构由理由和结论两部分组成。</p><p>我们把没有明说出来的想法成为假设。</p><p>先检查理由，然后检查结论，寻找价值观假设和描述性假设。  </p><p>假设越可疑，推理和结论的相关程度也就越小。</p><p>用证据证明一件事引起另一件事发生的过程里常见的一个难题–替代原因。</p><p>单一的个人经历，甚至是个人经历的总和，根本不足以构成一个代表性的经历样本。</p><ul><li>价值观是：人这辈子觉得什么是最珍贵的。例如 价值观：我喜欢团队合作，不喜欢竞争，不喜欢办公室文化。  </li><li>价值观假设：就是在特定情形下没有明说的出来的喜欢一种价值观超过另一种价值观的偏向。</li><li>谬误，就是推理中的欺骗手段，作者有肯恩利用这个欺骗手段来说服你采纳结论。</li><li>过度简化因果关系谬误指 依赖并不足解释整个事件的具有因果关系的因素来解释一个事件，或者过分强调这些因素的一个或多个因素的作用。  </li><li>以偏概全谬误指一个人仅根据群体中极小部分人的经历就得出有关整个群体的结论。</li><li>循环论证谬误指在推理过程中已然假设自己的结论成立的论证。</li><li>人生攻击谬误指针对个人的人身攻击或侮辱，而不是直接反驳其提供的理由。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="Share" scheme="https://www.daihuiyou.top/categories/Share/"/>
    
    
      <category term="Share" scheme="https://www.daihuiyou.top/tags/Share/"/>
    
  </entry>
  
  <entry>
    <title>hexo博客搭建流程</title>
    <link href="https://www.daihuiyou.top/2018/08/20/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <id>https://www.daihuiyou.top/2018/08/20/hexo博客搭建流程/</id>
    <published>2018-08-20T06:03:47.000Z</published>
    <updated>2018-11-09T06:12:02.410Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="记录总体的搭建流程"><a href="#记录总体的搭建流程" class="headerlink" title="记录总体的搭建流程"></a>记录总体的搭建流程</h2><ol><li>搭建Node.js环境：命令行使用<strong>node -v</strong>查看版本。</li><li>安装Hexo博客框架：<strong>npm install hexo-cli -g</strong></li><li><strong>安装git, git同步在github上</strong>。</li><li>开启GitHub Pages服务： <strong>注意要选择主题，才有效。</strong></li><li>创建文件夹，存放博客文件： hexo init  myHexoBlog   </li><li>hexo g  //g是generetor的缩写，生成博客</li><li>hexo s  //s是server的缩写，启动服务</li><li><strong>hexo与github关联起来</strong></li><li>绑定域名</li><li>更换主题</li></ol><hr><h2 id="安装git-git同步在github上"><a href="#安装git-git同步在github上" class="headerlink" title="安装git, git同步在github上"></a>安装git, git同步在github上</h2><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;</code></pre><ol><li><strong>生成ssh密钥文件：</strong>ssh-keygen -t rsa -C “你的GitHub注册邮箱”</li><li>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</li><li>打开GitHub_Settings_keys 页面，新建new SSH Key</li><li>在Git Bash中检测GitHub公钥设置是否成功，输入 <strong>ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> </strong></li></ol><hr><h2 id="hexo与github关联起来：打开站点的配置文件-config-yml"><a href="#hexo与github关联起来：打开站点的配置文件-config-yml" class="headerlink" title="hexo与github关联起来：打开站点的配置文件_config.yml"></a>hexo与github关联起来：打开站点的配置文件_config.yml</h2><pre><code>deploy:      type: git      repository: git@github.com:DaiHuiYou/DaiHuiYou.github.io.git      branch: master</code></pre><hr><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><pre><code>ping www.daihuiyou.github.io #得到IP值</code></pre><p> 第一步：在阿里云解析服务： 填写</p><pre><code>主机记录www对应 daihuiyou.github.io主机记录@对应 www.daihuiyou.github.io主机记录www对应 185.199.111.153主机记录@对应 185.199.111.153</code></pre><p> 第二步：登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入域名 daihuiyou.top</p><p> 第三步：进入本地博客文件夹 ，进入blog/source目录下，创建一个CNAME，编辑内容为daihuiyou.top</p><hr><h2 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h2><p>待更新。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="开篇" scheme="https://www.daihuiyou.top/categories/%E5%BC%80%E7%AF%87/"/>
    
    
      <category term="博客" scheme="https://www.daihuiyou.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>My New Post</title>
    <link href="https://www.daihuiyou.top/2018/08/19/My-New-Post/"/>
    <id>https://www.daihuiyou.top/2018/08/19/My-New-Post/</id>
    <published>2018-08-18T16:06:36.000Z</published>
    <updated>2019-05-28T02:33:25.420Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="Have-a-good-day"><a href="#Have-a-good-day" class="headerlink" title="Have a good day!"></a>Have a good day!</h4><h4 id="Cease-to-struggle-and-you-cease-to-live"><a href="#Cease-to-struggle-and-you-cease-to-live" class="headerlink" title="Cease to struggle and you cease to live."></a>Cease to struggle and you cease to live.</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
      <category term="开篇" scheme="https://www.daihuiyou.top/categories/%E5%BC%80%E7%AF%87/"/>
    
    
      <category term="the first post." scheme="https://www.daihuiyou.top/tags/the-first-post/"/>
    
  </entry>
  
</feed>
